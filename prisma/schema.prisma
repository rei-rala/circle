datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum SocialEventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
  COMPLETED
}

model SocialEvent {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  public          Boolean           @default(false)
  ownerId         String            @db.ObjectId
  owner           User              @relation(name: "EventOwner", fields: [ownerId], references: [id])
  title           String
  date            DateTime?
  status          SocialEventStatus
  time            String?
  description     String
  photo           String?
  place           Json? // Store the google.maps.places.PlaceResult data as JSON
  minAttendees    Int               @default(0)
  attendees       Attendee[]        @relation("EventAttendees")
  publicAttendees Boolean           @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted   Boolean   @default(false)
  deletedAt DateTime?

  User   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  role String @default("USER")

  alias       String   @default("")
  bio         String   @default("")
  location    String   @default("")
  phone       String   @default("")
  socialMedia String[] @default([])

  hideEmail Boolean @default(false)
  hideImage Boolean @default(false)
  hidePhone Boolean @default(false)

  admitted   Boolean   @default(false)
  admittedAt DateTime?
  banned     Boolean   @default(false)
  bannedAt   DateTime?
  banReason  String?

  createdEvents  SocialEvent[] @relation("EventOwner")
  attendedEvents Attendee[]    @relation("UserAttendees")

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  SocialEvent SocialEvent[]
  Account     Account[]
  Session     Session[]
}

model Attendee {
  id       String      @id @default(auto()) @map("_id") @db.ObjectId
  eventId  String      @db.ObjectId
  event    SocialEvent @relation("EventAttendees", fields: [eventId], references: [id])
  userId   String      @db.ObjectId
  user     User        @relation("UserAttendees", fields: [userId], references: [id])
  joinedAt DateTime    @default(now()) // Date when the user joined the event
  leftAt   DateTime? // Optional date when the user left the event

  bannedFromEvent Boolean @default(false)
  banReason       String?
  bannedById      String? @db.ObjectId
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 1. NotificationType: Define los tipos principales de notificaciones.
// 2. NotificationSubtype: Proporciona subtipos más específicos de notificaciones.
// 3. NotificationScope: Determina el alcance o audiencia de la notificación.

// Estos enums se utilizan como tipos para los campos 'type', 'subtype' y 'scope' en el modelo Notification,
// respectivamente. Esto asegura que estos campos solo puedan tener valores predefinidos,
// lo que ayuda a mantener la consistencia de los datos y facilita la lógica de negocio
// relacionada con el manejo de diferentes tipos de notificaciones.

model Notification {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  content            String
  icon               String?
  link               String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  type               NotificationType
  subtype            NotificationSubtype
  scope              NotificationScope
  targetUserIds      String[]            @default([]) @db.ObjectId
  seenByUserIds      String[]            @default([]) @db.ObjectId
  dismissedByUserIds String[]            @default([]) @db.ObjectId
  isDeleted          Boolean             @default(false)
  deletedAt          DateTime?

  originUserId       String?             @db.ObjectId
  relatedInfoType    NotificationRelatedInfoType?
  relatedInfoId      String?             @db.ObjectId
}

enum NotificationRelatedInfoType {
  USER
  EVENT
}


enum NotificationType {
  MEMBER
  GLOBAL
  EVENT
}

enum NotificationSubtype {
  GENERAL
  ADMISSION
  UPDATE
  CUSTOM
}

enum NotificationScope {
  GLOBAL
  ADMIN
  USER
}
